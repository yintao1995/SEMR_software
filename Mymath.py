# -*- coding: utf-8 -*-
"""
Created on Tue Oct 14 09:39:07 2014

@author: cesc
"""
import numpy 
import math
from scipy.optimize import leastsq
class dataProcess():
    def get_var(self,data,n,amp):      
        narray = numpy.array(data)
#        flag = 1
#        while flag:
#            try :
#                narray.shape = -1,n
#                flag = 0
#            except:
#                narray = numpy.hstack((narray,narray[-1]))
#                flag = 1 
#        m,n = narray.shape
#        var=[]
#        for i in range(m):
#            temp = narray[i].var()
#            var = var+[temp]*n
        var = []
        for i in range(len(data)-n+1):
            temp = narray[i:i+n].var()*amp
            var.append(temp)
        #前后补上最相近的值保证list总长度不变
        m = int(round(float(n)/2))-1
        var[0:0] = [var[0]]*m
        var = var + [var[-1]]*(n-1-m)
        return var
#    def myMean(self,data):
#        sum_temp=0        
#        for i in range(len(data)):
#            sum_temp=sum_temp+i*data[i]
#        return sum_temp/sum(range(len(data)))
    def smooth(self,data,n):
        narray = numpy.array(data)
        smooth_data=[]
        for i in range(len(data)-n+1):
            mean = narray[i:i+n].mean()
            #mean = self.myMean(data[i:i+n])            
            smooth_data.append(mean)
        #前后补零保证smooth后list长度不变
        m = int(round(float(n)/2))-1
        smooth_data[0:0]=[smooth_data[0]]*m
        smooth_data = smooth_data+[smooth_data[-1]]*(n-1-m)
        return smooth_data
    def get_peak(self,data,n):
        flag = []
        for i in range(len(data)-n):
            if data[i+n]-data[i]>=0:
                flag.append(1)
            elif data[i+n]-data[i]<0:
                flag.append(-1)
        m = int(round(float(n)/2))-1
        flag[0:0]=list(numpy.zeros(m))
        flag = flag+list(numpy.zeros(n-m))
        index_peak = []
        index_valley = []        
        for i in range(len(data)-1):
            if flag[i+1]-flag[i] == 2:
                index_valley.append(i+1)
            elif flag[i+1]-flag[i] == -2:
                index_peak.append(i+1)
        return  index_peak,index_valley
        
    def get_phi(self,Imax,Imin,I):
        I0=(Imax+Imin)/2
        gamma = (Imax-Imin)/(Imax+Imin)
        #如果acos后边的值大于1则按1进行计算
        try:
            phi = math.acos((I-I0)/(I0*gamma))
        except:
            if I>=Imax:
                phi = 0.0
            elif I<=Imin:
                phi = math.pi
        return phi
        
        
    def getPhi(self,peak_x,peak_y,valley_x,valley_y,start,end):
        #计算出整的周期数3-1,4-1.5,5-2,6-2.5
        n = float(len(peak_x)+len(valley_x)-1)/2.0
        phi = n*2*math.pi
        print(phi/2.0/math.pi)
        #估计其余的相位
        #起始部分相位估计
        if(peak_x[0]<valley_x[0]):
            phi_start = self.get_phi(peak_y[0],valley_y[0],start)
        elif((peak_x[0]>=valley_x[0])):
            phi_start = math.pi-self.get_phi(peak_y[0],valley_y[0],start)
        print(phi_start/2.0/math.pi)
        #结束部分相位估计
        if(peak_x[-1]>valley_x[-1]):
            phi_end = self.get_phi(peak_y[-1],valley_y[-1],end)
        elif(peak_x[-1]<=valley_x[-1]):
            phi_end = math.pi-self.get_phi(peak_y[-1],valley_y[-1],end)
        print(phi_end/2.0/math.pi)
        phi = phi+phi_start+phi_end
        print(phi/2.0/math.pi)
        return phi
        
        
    def leastsqProcess(self,y,x):
        def func0(x, p):
            a,b,c,d = p
            return a*x**3+b*x**2+c*x+d
        def func1(x, p):
            a,b = p
            return a**x+b
            
        def residuals(p, y, x):
            return y - func0(x, p)        
        p0 = [1,1,1,1]
        plsq = leastsq(residuals, p0, args=(y, x))
        return plsq[0]
    
    def lineProcess(self,y,x):
        def func0(x, p):
            a,b = p
            return a*x+b
        def residuals(p, y, x):
            return y - func0(x, p)        
        p0 = [1,1]
        plsq = leastsq(residuals, p0, args=(y, x))
        return plsq[0]

    def expProcess(self,y,x):
        def func0(x, p):
            a,b,c = p
            return a-b*math.e**(-x*c)
        def residuals(p, y, x):
            return y - func0(x, p)        
        p0 = [1,1,1]
        plsq = leastsq(residuals, p0, args=(y, x))
        return plsq[0]
    
    def getMaxExistData(self,data,n):
        data.sort()
        sum_temp=[]
        for i in range(len(data)-n+1):
            sum_tmp=0
            for j in range(n):
                sum_tmp=sum_tmp+data.count(data[i]+j)
            sum_temp.append(sum_tmp)
        max_sum=max(sum_temp)
        print(max_sum)
        print(zip(sum_temp,data))
        data_wanted=[]
        for i in range(len(sum_temp)):
            if math.fabs(sum_temp[i]-max_sum)<=10:
                data_wanted.append(data[i])
        data_wanted=list(set(data_wanted))
        print("data_wanted1..........")
        print(data_wanted)
        
        result=[]
        index_remove=[]
        for i in range(len(data_wanted)-1):
            if math.fabs(data_wanted[i+1]-data_wanted[i])<5:
                index_remove.append(i)
                data_wanted[i]=[]
        for i in range(len(index_remove)):
            data_wanted.remove([])
        print("data_wanted2..........")
        print(data_wanted)
        
        for memb in data_wanted:
            result.append(range(memb,memb+n))
        return result
        
    def getIndex(self,data,elememt):
        data_temp=[memb for memb in data]
        data_temp.append(elememt)
        data_temp.sort()
        data1=data_temp[data_temp.index(elememt)-1]
        data2=data_temp[data_temp.index(elememt)+1]
        if math.fabs(elememt-data1)<=math.fabs(elememt-data2):
            return data.index(data1)
        else:
            return data.index(data2)
            
        
#a=dataProcess()       
##peak_x=[4940.0, 4976.0, 5000.0, 5033.0, 5094.0, 5165.0]
##peak_y=[0.21299999999999999, 0.2132, 0.2137, 0.21429999999999999, 0.2145, 0.2145]
##valley_x=[4963.0, 4988.0, 5015.0, 5056.0, 5129.0]
##valley_y=[0.18740000000000001, 0.18759999999999999, 0.18740000000000001, 0.1875, 0.1883]
##start=0.213
##end=0.1926  
##0.1874
##b=a.get_var([2.0,2.0,2.0,1.0,1.1,1.0],4)
###b=a.smooth([1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0],3)
###b=a.get_phi(2.0,0.0,0.5)
##b=a.getPhi(peak_x,peak_y,valley_x,valley_y,start,end)
#y=numpy.array([0,0.063709598157420042, 0.12821713302869092, 0.15945268984925773, 0.18005408715138951, 0.19556833938691931, 0.2073026941696722, 0.21489429355206363, 0.22210112846527444, 0.22876910461235367, 0.23436660640651924, 0.23771759978609305, 0.24251334994471127, 0.24559282627205051, 0.24921318131139389, 0.25225620611130645, 0.25509912947665131, 0.25647783028996074, 0.25845046888337703, 0.2590893164274885, 0.26322875155741499, 0.26350020827531889, 0.26558409712990233, 0.26682778726224737, 0.26657827317450555, 0.26722419604992481, 0.26870124470501588, 0.2705001607351506, 0.27165867504329955, 0.27038407326969666, 0.27320965031077643, 0.27302190628963385, 0.27380980824239115, 0.27475107935613036, 0.27396299165916632, 0.27550111789247278, 0.27469209424205643, 0.2766863256775417, 0.27672608048714592, 0.27613301179457794, 0.27672629406256266, 0.27769193240221623, 0.27727898031721515, 0.27696076018552401, 0.27859841314304612, 0.27967080381649828, 0.27839843289580368, 0.27923567292861573, 0.2805910653693609, 0.28047719483749223, 0.28216352030986613, 0.28192867186168408, 0.28207212868334997, 0.28152300664840441, 0.2817640436416613, 0.28297640315503081, 0.28394210411527421, 0.28341627394500557, 0.28467947316045766, 0.28553599991155759, 0.28423700725748485, 0.28380185259352608, 0.2845537068820907, 0.28442310091189155, 0.28606521698264642, 0.28534571533017339, 0.28548472891437149, 0.28642231105827232, 0.28579810359623603, 0.28783025026179193, 0.28786826165358181, 0.28691420144784274, 0.28883588592917225, 0.28802427246403306, 0.2883541103417257, 0.28752973672935456, 0.2899755439494236, 0.28833140323921436, 0.28961004062575596, 0.28868772023527256, 0.28970256981536247, 0.28995058994344153, 0.28984718214250393, 0.29145976553031216, 0.28942922955034811, 0.29285570140938072, 0.29137497291884318, 0.29241328029865798, 0.29175180935883838, 0.29264848937556809, 0.29305002147403553, 0.29212514213960095, 0.29312854370079194, 0.29292093508890815, 0.29352744318355117, 0.29378413502898876, 0.29296866368448027, 0.29447723967864903, 0.29348546761790861, 0.29571690862891681, 0.294752469292202, 0.29456158474000321, 0.29558157274724256, 0.29478630079134654, 0.2941363257339345, 0.29683856039334999, 0.29603752303087638, 0.29687342987433402, 0.29745835619841776, 0.29747505581052242, 0.29747023370148329, 0.29627605753536862, 0.29888258604717061, 0.29802876685583879, 0.29858164030299222, 0.29718683224142223, 0.29800243359268752, 0.29845068971663591, 0.29830240105196415, 0.29887026150030804, 0.29945514550503155, 0.29937616791338367, 0.29941778186804535, 0.29829971333867966, 0.29982646279676162, 0.29810119948208813, 0.30084410286549973])
#x=numpy.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
#b=a.expProcess(y,x)
#data=[861, 873, 380, 396, 420, 439, 466, 505, 516, 529, 542, 563, 572, 586, 623, 631, 641, 655, 667, 683, 710, 724, 735, 750, 766, 781, 800, 820, 839, 866, 880, 384, 398, 419, 439, 461, 505, 517, 530, 561, 573, 589, 623, 636, 644, 655, 669, 737, 750, 767, 782, 801, 820, 839, 871, 394, 420, 438, 505, 532, 623, 641, 657, 670, 684, 699, 733, 751, 780, 799, 817, 837, 862, 879, 502, 532, 816, 861, 502, 531, 863, 908, 502, 531, 868, 911, 502, 531, 816, 865, 502, 531, 860, 502, 531, 866, 906, 502, 531, 868, 502, 531, 866, 501, 531, 869, 502, 531, 869, 501, 531, 867, 502, 531, 869, 502, 531, 862, 906, 502, 531, 866, 501, 531, 502, 531, 866, 501, 531, 858, 502, 531, 501, 531, 866, 501, 531, 867, 501, 531, 869, 501, 531, 865, 501, 531, 860, 905, 502, 531, 861, 907, 501, 531, 868, 502, 531, 866, 502, 531, 865, 502, 531, 866, 501, 531, 863, 501, 531, 858, 902, 501, 531, 867, 501, 531, 866, 501, 531, 864, 502, 531, 870, 501, 531, 866, 907, 501, 531, 869, 501, 531, 864, 501, 531, 867, 501, 531, 867, 904, 501, 531, 860, 904, 501, 531, 869, 501, 531, 855, 901, 501, 531, 866, 501, 531, 867, 909, 501, 531, 866, 501, 531, 859, 905, 501, 531, 816, 861, 909, 501, 531, 865, 501, 531, 865, 501, 531, 866, 384, 501, 531, 815, 864, 501, 531, 865, 501, 531, 868, 501, 531, 867, 501, 531, 864, 501, 531, 906, 501, 531, 860, 905, 501, 531, 868, 501, 531, 869, 501, 531, 858, 501, 531, 867, 501, 531, 866, 902, 501, 531, 856, 909, 501, 531, 866, 501, 531, 866, 501, 531, 866, 501, 531, 869, 501, 531, 860, 899, 912, 501, 531, 860, 501, 531, 869, 501, 531, 866, 501, 531, 866, 501, 531, 868, 501, 531, 867, 501, 531, 818, 867, 385, 501, 531, 816, 864, 387, 391, 501, 531, 817, 867, 394, 501, 531, 864, 501, 531, 872, 907, 501, 531, 816, 867, 501, 531, 866, 393, 501, 531, 868, 501, 531, 865, 393, 501, 531, 864, 501, 531, 859, 501, 531, 867, 905, 501, 530, 860, 868, 501, 531, 859, 868, 385, 501, 530, 814, 860, 906, 390, 501, 530, 816, 862, 381, 501, 531, 816, 862, 501, 531, 862, 392, 501, 531, 816, 868, 395, 501, 531, 868, 393, 501, 531, 865, 501, 531, 801, 856, 905, 501, 531, 869, 392, 501, 531, 860, 908, 501, 531, 866, 900, 501, 531, 860, 906, 501, 531, 866, 392, 501, 531, 866, 380, 501, 531, 864, 391, 501, 531, 817, 867, 391, 501, 531, 867, 391, 424, 501, 531, 866, 425, 501, 531, 857, 866, 424, 501, 531, 868, 392, 501, 531, 868, 393, 425, 501, 531, 860, 868, 900, 423, 501, 531, 856, 385, 501, 531, 862, 391, 426, 501, 531, 862, 424, 501, 531, 861, 868, 908, 392, 426, 501, 531, 866, 391, 501, 531, 867, 392, 425, 501, 531, 862, 385, 501, 531, 815, 866, 422, 501, 531, 854, 900, 392, 501, 531, 860, 910, 393, 422, 501, 531, 868, 379, 424, 501, 531, 816, 865, 423, 501, 531, 866, 900, 386, 501, 530, 815, 865, 423, 501, 530, 872, 885, 898, 389, 501, 531, 816, 860, 868, 394, 501, 531, 868, 382, 501, 530, 817, 866, 393, 424, 501, 530, 856, 869, 898, 912, 384, 423, 501, 530, 866, 393, 424, 501, 531, 863, 393, 423, 501, 530, 869, 912, 390, 424, 501, 531, 816, 862, 898, 394, 501, 531, 866, 391, 424, 501, 530, 869, 387, 501, 531, 859, 901, 384, 425, 501, 531, 816, 855, 866, 885, 386, 391, 501, 530, 861, 424, 501, 530, 869, 426, 501, 531, 868, 384, 425, 501, 530, 816, 854, 866, 392, 410, 501, 530, 861, 424, 501, 530, 868, 389, 424, 501, 531, 817, 870, 394, 410, 501, 531, 865, 902, 425, 501, 530, 868, 378, 425, 501, 530, 853, 868, 385, 424, 501, 531, 815, 860, 869, 882, 383, 392, 409, 501, 530, 816, 858, 867, 391, 501, 530, 860, 866, 394, 409, 426, 501, 530, 866, 907, 424, 501, 530, 869, 393, 409, 427, 501, 530, 860, 392, 425, 501, 531, 816, 853, 866, 392, 424, 501, 530, 866, 393, 408, 424, 501, 531, 868, 395, 406, 501, 530, 864, 900, 378, 423, 501, 530, 854, 869, 913, 423, 501, 530, 816, 851, 877, 424, 501, 530, 853, 868, 910, 389, 425, 501, 530, 815, 855, 390, 425, 501, 530, 818, 866, 904, 424, 501, 530, 847, 871, 392, 407, 501, 530, 816, 858, 901, 393, 406, 501, 531, 866, 392, 425, 501, 530, 816, 865, 395, 501, 530, 819, 860, 897, 379, 422, 501, 530, 771, 812, 844, 873, 395, 409, 501, 530, 866, 385, 395, 501, 530, 818, 865, 903, 387, 424, 501, 530, 814, 853, 869, 384, 501, 530, 816, 855, 869, 390, 501, 530, 816, 861, 911, 395, 501, 530, 866, 905, 391, 426, 501, 530, 817, 855, 888, 898, 392, 501, 530, 816, 865, 393, 501, 530, 862, 900, 501, 530, 816, 867, 501, 530, 816, 868, 396, 501, 530, 802, 868, 392, 424, 501, 530, 816, 868, 501, 530, 867, 905, 391, 501, 530, 866, 386, 390, 501, 530, 816, 854, 869, 386, 426, 501, 530, 816, 869, 909, 379, 425, 501, 530, 772, 814, 853, 870, 393, 501, 530, 817, 860, 898, 394, 427, 501, 530, 818, 859, 900, 394, 501, 530, 818, 862, 900, 907, 392, 501, 530, 865, 905, 932, 426, 501, 530, 867, 387, 427, 501, 530, 816, 853, 867, 884, 392, 501, 530, 817, 861, 386, 390, 501, 530, 816, 855, 898, 388, 428, 501, 530, 816, 854, 871, 386, 501, 530, 816, 866, 904, 386, 501, 530, 818, 861, 899, 393, 501, 530, 817, 861, 899, 386, 501, 530, 865, 903, 389, 408, 426, 501, 530, 816, 866, 392, 428, 501, 530, 816, 859, 899, 424, 501, 530, 771, 808, 852, 870, 425, 501, 530, 770, 803, 816, 841, 868, 912, 426, 501, 530, 770, 803, 815, 841, 850, 870, 387, 408, 426, 501, 530, 816, 856, 885, 501, 530, 868, 395, 427, 501, 530, 800, 865, 393, 501, 530, 816, 864, 900, 391, 408, 501, 530, 801, 868, 392, 427, 501, 530, 815, 865, 397, 501, 530, 800, 866, 902, 387, 427, 501, 530, 816, 858, 385, 427, 501, 530, 816, 857, 870, 888, 387, 393, 428, 501, 530, 771, 816, 860, 901, 386, 426, 501, 530, 814, 867, 384, 425, 501, 530, 816, 869, 388, 425, 501, 530, 818, 866, 904, 382, 425, 501, 530, 771, 815, 866, 396, 410, 501, 530, 796, 865, 901, 391, 426, 501, 530, 774, 816, 858, 872, 392, 427, 501, 530, 817, 856, 865, 900, 392, 501, 530, 771, 815, 867, 392, 501, 530, 771, 816, 866, 379, 425, 501, 530, 775, 815, 853, 871, 899, 383, 427, 501, 530, 771, 816, 867, 426, 501, 530, 772, 814, 870, 501, 530, 771, 817, 867, 908, 391, 501, 530, 819, 859, 898, 392, 501, 530, 860, 900, 392, 501, 530, 770, 817, 866, 501, 530, 769, 817, 866, 425, 501, 530, 769, 803, 818, 865, 394, 501, 530, 866, 904, 383, 427, 501, 530, 774, 816, 855, 868, 885, 395, 501, 530, 817, 860, 386, 427, 501, 530, 771, 815, 855, 869, 501, 530, 863, 906, 392, 501, 530, 815, 855, 869, 887, 394, 501, 530, 818, 861, 903, 393, 501, 530, 817, 862, 895, 394, 501, 530, 799, 816, 866, 392, 410, 501, 530, 818, 860, 896, 386, 501, 530, 816, 853, 873, 387, 390, 427, 501, 530, 771, 817, 862, 385, 501, 530, 816, 864, 425, 501, 530, 770, 801, 815, 867, 384, 392, 501, 530, 817, 862, 865, 902, 392, 501, 530, 817, 858, 387, 501, 530, 817, 857, 865, 897, 426, 501, 530, 771, 868, 907, 426, 501, 530, 771, 815, 869, 910, 388, 501, 530, 771, 816, 868, 386, 392, 501, 530, 817, 865, 424, 501, 530, 772, 815, 868, 392, 501, 530, 817, 866, 903, 501, 530, 771, 817, 866, 424, 501, 530, 770, 866, 901, 392, 501, 530, 816, 860, 501, 530, 770, 816, 867, 391, 501, 530, 817, 866, 386, 427, 501, 530, 772, 815, 852, 875, 396, 501, 530, 818, 861, 898, 386, 501, 530, 818, 855, 384, 501, 530, 815, 862, 868, 501, 530, 868, 386, 426, 501, 530, 771, 815, 861, 872, 501, 530, 770, 803, 816, 869, 383, 501, 530, 770, 817, 864, 393, 409, 501, 530, 817, 860, 896, 425, 501, 530, 770, 816, 866, 426, 501, 530, 769, 818, 866, 900, 391, 425, 501, 530, 608, 770, 816, 866, 501, 530, 771, 817, 864, 902, 383, 501, 530, 770, 814, 869, 425, 501, 530, 769, 800, 866, 391, 409, 501, 530, 771, 816, 865, 404, 424, 502, 530, 604, 655, 819, 860, 901, 386, 392, 424, 502, 530, 604, 655, 722, 769, 818, 861, 899, 384, 423, 501, 530, 603, 656, 771, 806, 811, 869, 422, 502, 530, 604, 656, 770, 816, 867, 904, 405, 423, 502, 530, 604, 655, 722, 770, 817, 861, 899, 407, 423, 502, 530, 604, 656, 769, 799, 865, 902, 408, 423, 502, 530, 604, 655, 770, 817, 866, 901, 384, 406, 423, 502, 530, 604, 655, 770, 816, 865, 884, 404, 423, 502, 530, 604, 655, 722, 769, 795, 818, 861, 899, 406, 423, 502, 530, 604, 656, 771, 816, 868, 406, 422, 502, 530, 603, 655, 722, 770, 796, 816, 865, 900, 408, 423, 502, 530, 604, 656, 770, 816, 866, 904, 386, 406, 423, 502, 530, 604, 656, 771, 816, 845, 868, 387, 424, 502, 530, 604, 656, 772, 816, 856, 873, 406, 423, 502, 530, 603, 656, 770, 803, 816, 868, 408, 423, 502, 530, 604, 655, 770, 816, 864, 899, 385, 423, 502, 530, 604, 655, 771, 815, 872, 406, 424, 502, 530, 604, 655, 722, 770, 816, 866, 901, 385, 424, 502, 530, 604, 655, 722, 771, 817, 864, 888, 406, 424, 502, 530, 604, 656, 771, 816, 867, 911, 405, 423, 502, 530, 604, 655, 722, 769, 817, 861, 899, 405, 423, 502, 530, 604, 656, 771, 804, 815, 844, 867, 910, 405, 423, 502, 530, 604, 656, 770, 815, 844, 868, 907, 407, 424, 502, 530, 604, 655, 769, 795, 817, 862, 899, 392, 424, 502, 530, 604, 655, 722, 774, 816, 858, 870, 406, 423, 502, 530, 604, 655, 771, 819, 867, 900, 912, 408, 424, 502, 530, 604, 656, 770, 815, 866, 385, 405, 424, 502, 530, 604, 656, 771, 816, 866, 405, 423, 502, 530, 604, 655, 767, 795, 819, 861, 406, 423, 502, 530, 603, 656, 771, 813, 842, 867, 385, 408, 424, 502, 530, 604, 656, 772, 814, 846, 871, 911, 389, 424, 502, 530, 604, 656, 773, 815, 857, 865, 884, 407, 424, 502, 530, 604, 656, 771, 815, 842, 869, 385, 403, 424, 502, 530, 604, 655, 770, 819, 861, 887, 390, 424, 502, 530, 604, 656, 772, 818, 857, 386, 407, 424, 502, 530, 604, 656, 772, 809, 812, 845, 871, 380, 423, 502, 530, 603, 656, 771, 804, 815, 868, 407, 423, 502, 530, 603, 656, 722, 770, 817, 865, 386, 401, 424, 502, 530, 604, 655, 772, 817, 859, 884, 901, 406, 423, 502, 530, 604, 656, 771, 816, 865, 406, 424, 502, 530, 604, 656, 723, 770, 815, 863, 899, 408, 423, 502, 530, 604, 656, 771, 816, 866, 904, 387, 424, 502, 530, 604, 656, 771, 816, 864, 386, 409, 424, 502, 530, 604, 656, 771, 870, 386, 390, 406, 424, 502, 530, 604, 655, 771, 815, 865, 386, 406, 424, 502, 530, 604, 656, 771, 868, 387, 407, 424, 502, 530, 604, 656, 771, 813, 869, 405, 423, 502, 530, 604, 656, 722, 770, 816, 866, 898, 391, 425, 502, 530, 603, 655, 771, 814, 854, 870, 883]
#b=a.getMaxExistData(data,5)
##data=[1,2,3,4,5,6,7,8,9]
##b=a.getIndex(data,7.1)

#print(b)
